Documentation: 
    Each line where the first non-whitespace character is ';' increments the
    parser mode:
        0: Ignore all lines as comments
        1: Parse preprocessor rules
        2: Parse grammar rules
        3: Parse precedence rules
        4+: Ignore all lines as comments


    Preface Definitions:
        A context is a block of lines (ignoring whitespace) which contains rules
        that utilize shared attributes. A context will begin with the context 
        annotation. This is a line whose first non-whitespace character is '@'. 
        
        The context annotation specifies the share attributes for Individual
        rules which comprise the context. Rules in the context are specified by
        space separated tokens, and each rule occupies its own line.

        A precedence class consists of a list of symbols which belong to that
        class. When the parse stack matches the pattern of a grammar rule, the
        parser will lookahead one token and compare the precedence of that
        token (it's associated operation) with the precedence of matched rule.
        A lookahead token with higher precedence will override the rule match.
            For more information you can read the C++ precedence classes docs.


    Notes:
        Because the tokenizer used on this file is the Pebble tokenizer, certain
        restrictions may apply. These are fully documented in the Pebble
        tokenizer docs but a brief and incomplete list of important
        considerations is provided here.
            - '#' characters denote comments and should not appear in rules


    Mode 1:
        This mode contains contexts which describe the rules for the grammar 
        preprocessor. After a line of raw text is tokenized, the preprocessor 
        is run to convert certain token patterns into single tokens which 
        specify atomic operations. In effect, this allows for operations to have
        single or multi token aliases.

        The context annotation must be of this form:

            @ [simpleTokenContent]

        where:
            [simpleTokenContent]:   the content of the token which will replace
                                    a matched patterns
        
        Following the annotation each line specifies a pattern which if matched,
        will be replaced by the a single token with content [simpleTokenContent]


    Mode 2:
        This mode contains the grammar rules. These are CFG production rules
        which specify how to convert the preprocessed list of tokens into a 
        abstract syntax tree. 

        The context annotation for this section should be of the following form:

            @ [operationType] [precedenceSymbol] [reversalMethod]
        
        where:
            [operationType]:    the string representation of the OperationType 
                                enum located in `abstract.h` which describes
                                the Type of the AST node (an Operation object)
                                which context rules collapse into
            
            [precedenceSymbol]: the symbol used in this operation which will 
                                specify the precedence class for this operation

            [reversalMethod]"   the specific method which is invoked to collapse
                                the pattern back into the production rule

        and after this there are the optional precedence override lines which
        take a whitespace separated list of precedence symbols
            > [precedenceSymbol] ...
            < [precedenceSymbol] ...

        where:
            [precedenceSymbol]: is a member of a precedence class defined in 
                                section 3

        '>' indicates that the precedence symbol which follow it are of higher 
            precedence

        '<' indicates the reverse

        The reader may be confused as to why the higher precedence override
        symbol appears to be the less than symbol. The reason behind this design
        choice, beyond being completely arbitrary, is that the '>' symbol looks
        like a right facing arrow, and thus appears to indicate that the current
        matching rule should be skipped and the parser should read the next
        token.

        Finally, the specific rules in this mode should be structured as CFG
        production rules.

            [productionRule] -> [patternText] ...

        where:
            [productionRule]:   is the name of a CFG production rule and by
                                convention (and possibly necessity) capitalized
            
            [patternText]:      is a string of either simple characters
                                which represent an operation, or itself a
                                productionRule

        Note:   
            All references are tokenized as 'Ref'

        Grammar rules are matched in the order that they are listed. This will 
        in some edge cases impact which rules are matched and should be taken
        into consideration when adding/modifying rules.


    Mode 3:
        This section contains the precedence classes. There are not contexts.
        Instead, non-empty line contains a whitespace separated list of symbols
        that comprise a given precedence class. The classes in this section are
        listed from highest precedence to lowest precedence.

    

------------------------------------------------------------------------------------------------------------------------

;;; Preprocessing
@ <=
is leq to
is leq
leq 
leq to
is less than or equal to

@ >=
is geq to
is geq
geq
geq to
is greater than or equal to

@ >
is greater than

@ <
is less than

@ ==
equals
is equal
is equal to

@ !=
does not equal
not equal
not equal to
not equals
is not

@ !
not

@ a
an

@ &&
and

@ ||
or

@ here
inherits

@ say
print

@ .
's

@ else
otherwise
ow





;;; Grammar begins here

@ IsEqual == Reduce
Expr -> Expr == Expr
Expr -> Expr == SRef
Expr -> SRef == Expr

@ IsNotEqual != Reduce
Expr -> Expr != Expr
Expr -> Expr != SRef
Expr -> SRef != Expr

@ IsGreaterThan > Reduce
Expr -> Expr > Expr
Expr -> Expr > SRef
Expr -> SRef > Expr

@ IsLessThan < Reduce
Expr -> Expr < Expr
Expr -> Expr < SRef
Expr -> SRef < Expr

@ IsGreaterThanOrEqualTo >= Reduce
Expr -> Expr >= Expr
Expr -> Expr >= SRef
Expr -> SRef >= Expr

@ IsLessThanOrEqualTo <= Reduce
Expr -> Expr <= Expr
Expr -> Expr <= SRef
Expr -> SRef <= Expr

@ DoTypeBinding a Reduce
Expr -> a Ref 


@ New new Reduce
Expr -> new Ref


@ ScopeResolution . Reduce
> (
SRef -> Expr . Ref
SRef -> SRef . Ref
SRef -> Ref


@ Return = Reduce
Line -> return Expr


@ Add + Reduce
Expr -> Expr + Expr
Expr -> Expr + SRef
Expr -> SRef + Expr

@ Subtract - Reduce
Expr -> Expr - Expr
Expr -> Expr - SRef
Expr -> SRef - Expr

@ Multiply * Reduce
Expr -> Expr * Expr
Expr -> Expr * SRef
Expr -> SRef * Expr

@ Divide / Reduce
Expr -> Expr / Expr
Expr -> Expr / SRef
Expr -> SRef / Expr

@ And && Reduce
Expr -> Expr && Expr
Expr -> Expr && SRef
Expr -> SRef && Expr

@ Or || Reduce
Expr -> Expr || Expr
Expr -> Expr || SRef
Expr -> SRef || Expr

@ Not ! Retain
Expr -> ! Expr


@ Ask lowest Reduce
Expr -> ask Expr

@ Print lowest Reduce
Line -> say Expr



@ EvaluateHere ! Reduce
Expr -> here Expr

@ Evaluate ( ScopedEval
> :
Expr -> SRef . Ref ( )
Expr -> SRef . Ref ( Expr )
Expr -> SRef . Ref ( Tuple )

Expr -> Expr . Ref ( )
Expr -> Expr . Ref ( Expr )
Expr -> Expr . Ref ( Tuple )

@ Evaluate ( UnscopedEval
> :
Expr -> Ref ( )
Expr -> Ref ( Expr )
Expr -> Ref ( Tuple )

Expr -> Expr ( )
Expr -> Expr ( Expr )
Expr -> Expr ( Tuple )

@ Array [ Reduce
Expr -> Expr [ Expr ]

@ Else : Reduce
> if
Line -> else

@ ElseIf : Reduce
Line -> else if Expr

@ If : Reduce
Line -> if Expr


@ While : Reduce
Line -> while Expr

@ For : Reduce
Line -> for each ( Ref in Expr )
Line -> for each Ref in Expr 


@ DefineMethod : Custom
Lambda -> ( Tuple ) :
Lambda -> ( Expr ) :
Lambda -> ( ) :

@ Assign highest Reduce
Line -> Expr Lambda
Line -> SRef Lambda
Line -> Ref Lambda

@ IsEqual == Reduce
Expr -> Expr is Expr

@ Is is Reduce
Expr -> SRef is Expr

@ Assign = Reduce
Expr -> SRef = Expr
Expr -> SRef = ( Tuple )
Expr -> Expr = Expr





@ Tuple , Merge
Tuple -> Tuple , Expr

@ Tuple , Reduce
Tuple -> Expr , Expr


@ NoOperationType ( Retain
Expr -> ( Expr )

@ NoOperationType ! Retain
> = is
< [
Expr -> SRef

@ NoOperationType lowest Retain
Line -> consider Expr
Line -> take Expr
Line -> Expr






;;; Operator Precedence
in new a highest
(
[ .
!
* /
+ -
< > <= >=
== != 
&&
||
= is
,
) ] :
lowest 




;;; End 
