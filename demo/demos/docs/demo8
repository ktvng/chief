# Overview

Whats really happening?


This page outlines in detail what's really happening behind the scenes of Pebble 
and introduces the new programming paradigm which describes the theory behind Pebble. 
It's something that isn't required to appreciate Pebble syntax, but it 
is useful when moving into advanced topics and when pushing the boundaries of the 
language.


These ideas are not required to achieve a mastery of the fundementals of Pebble.


This page, then, can be considered optional. We encourage you to read though, because 
we find this new call-binding paradigm quite both compelling and interesting.

# Details

When we first introduced the Call, it was described as a variable, but with some 
additional, hidden complexity. We now touch on that hidden complexity. 
Formally, a call can be understood as a container which 
can hold any/all of three abstract entities: a scope, a section, and a type.


  - A scope a collection of Calls which are accessible.


  - A section is a 'section' of executable Pebble code. In general, it is 
    distinguished by indent level


  - A type is a formal expression of a category.


A Call, then, can hold one, two, or all three of these entities. When it is given 
one of them, we say that it is 'bound' to it. A Call can be invoked (i.e. SomeCall()) 
if it is bound to a section. Invocation is always done over a new scope.


With this terminology, we can now redefine the ideas of a method, object, and class. 


A method is a Call bound to a section. When executed, that section returns some value 
which is then the return value of the method.


A object is a Call bound to a scope. Using the dot operator, we can resolve different 
call names inside this scope. This scope can thus be used and understood as the attributes of the 
object.


A class is a special case of a method. It is bound to a section, and in particular, 
that section returns 'self'. Thus when a class is evaluated (i.e. an instance created), 
the section bound to that class is evaluted over a new scope. The code of this section 
populates this new scope with Calls, and in the end, 'return self' returns a new Call 
bound to this scope.


In summary, objects/methods/classes are all variants of Calls in which the emphasis 
of scope/section is varied. An object can also be bound to a section just as a method 
can also be bound to a scope. 


In the example above, Car is a method. In general, method's are bound to an empty 
scope. Here, however, line [10] adds a Call for 'Count' to the bound scope of the 
'Car' call. Line [2] refers to 'Car' the method and increments it's count. This 
effectively emulates static variables.


As whenever method invocation occurs, it does so on a new scope, the original local 
scope bound to 'Car' will never be overriden.


We will cover types later when we introduce the type system.